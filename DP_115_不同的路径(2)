/*115. 不同的路径 II
"不同的路径" 的跟进问题：
现在考虑网格中有障碍物，那样将会有多少条不同的路径？
网格中的障碍和空位置分别用 1 和 0 来表示。
样例
如下所示在3x3的网格中有一个障碍物：
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
一共有2条不同的路径从左上角到右下角。
注意事项
m 和 n 均不超过100 */

class Solution {
public:
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */
    int uniquePathsWithObstacles(vector<vector<int>> &obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp (m, vector<int>(n, 0));    //32，36行if的默认值。
        
        if (obstacleGrid[0][0] == 0)  // 这里先要把dp[0][0]设为1，才能递推第一行第一列其他元素。
        dp[0][0] = 1;
        else return 0;
        
        for (int i = 1; i < m; i++)
        if (obstacleGrid[i][0] == 0)        // 这里的if 和36行的if, 没有障碍（==0），则递推i-1的值，有障碍（==1），则采用默认值0.
        dp[i][0] = dp[i-1][0];  // 第一行或第一列有一个障碍的话，递推，障碍之后的都为0.
        
        for (int j = 1; j < n; j++)
        if (obstacleGrid[0][j] == 0)
        dp[0][j] = dp[0][j-1];  // 第一行或第一列有一个障碍的话，递推，障碍之后的都为0.
        
        for (int i = 1; i < m;i++)
        for (int j = 1; j < n;j++)
        if (obstacleGrid[i][j] == 0)
        dp[i][j] = dp[i-1][j] + dp[i][j-1];
        
        return dp[m-1][n-1];
    }
};
