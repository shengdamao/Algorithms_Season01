/*描述

给定一个数字三角形，找到从顶部到底部的最小路径和。每一步可以移动到下面一行的相邻数字上。

如果你只用额外空间复杂度O(n)的条件下完成可以获得加分，其中n是数字三角形的总行数。
您在真实的面试中是否遇到过这个题？  
样例

比如，给出下列数字三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]

从顶到底部的最小路径和为11 ( 2 + 3 + 5 + 1 = 11)。 */

class Solution {
public:
    /**
     * @param triangle: a list of lists of integers
     * @return: An integer, minimum path sum
     */
    int minimumTotal(vector<vector<int>> &triangle) {
       
         int m = triangle.size();
         int n = triangle[m-1].size();        
         vector<vector<int>> dp (m, vector<int> (n, -1));
         if (m == 1)
         return triangle[0][0];
         
         for (int i = 0; i < n ; i++)           //给三角形底部赋值
         {
            dp[m-1][i] = triangle[m-1][i];
         }
         
         for (int i = m-2; i >= 0; i--)
         for (int j = 0; j <= i; j++ )
         {
             if (dp[i][j] != -1)                //不是-1则已经计算过。
             continue;
             
             else
                dp[i][j] = min (dp[i+1][j], dp[i+1][j+1]) + triangle[i][j];   //核心，递推关系式。
         }
               
         return dp[0][0];        
            
    
    }
};
